{
  // Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

// List of all snippets  

  "_help": {
    "prefix": "_help",
    "body": [
      "// _binpow : Exponentiation",
      "// _dbg : Debug function",
      "// _test : test cases",
      "// _s : Starting template",
      "// _pbds : Policy Based Data Structure", 
    ]
  },

// Binary Exponentiation 

  "exponentiation": {
    "prefix": "_binpow",
    "body": [
      "long long binpow(long long a, long long b, long long _mod){",
      "   long long res = 1;",
      "    while (b>0){",
      "        if(b&1)res = (res*a)%_mod;",
      "        a = (a*a)%_mod;",
      "        b>>=1;",
      "    }",
      "    return res;",
      "}"
    ]
  },

// Debug function template

  "debug": {
    "prefix": "_dbg",
    "body": [
      "#define debug(x) cout<<#x<<\" = \";_print(x); cout<<endl; /// Debug function",
      "template<class T> void _print(T x) { cout << x; }",
      "template<class T> void _print(vector<T>x) { cout << \"[ \";for (T i : x)cout << i << \" \";cout << \"]\"; }",
      "template<class T> void _print(set<T>x) { cout << \"[ \";for (T i : x)cout << i << \" \";cout << \"]\"; }",
      "template<class T, class V> void _print(pair<T, V>x) { cout << \"{\" << x.first << \",\" << x.second << \"} \"; }",
      "template<class T, class V> void _print(map<T, V>x) { cout << \"[ \";for (auto i : x)_print(i);cout << \"]\"; }",
      "template<class T> void _print(multiset<T>x) { cout << \"[ \";for (T i : x)cout << i << \" \";cout << \"]\"; }"
    ]
  },

// Testcase Template

  "testcase": {
    "prefix": "_test",
    "body": ["int t;", "cin>>t;", "read:", "while (t--) {", "   $1", "", "}"]
  },

// Starting Template

  "template_zero": {
    "prefix": "_s",
    "body": [
      "#include<bits/stdc++.h>",
      "#define FAST_IO ios_base::sync_with_stdio(false); cin.tie(NULL)",
      "#define all(x) (x).begin(), (x).end()",
      "using namespace std; ",
      "",
      "",
      "",
      "int main() {",
      "   FAST_IO;",
      "   // start",
      "   $1",
      "",
      "",
      "",
      "   return 0;",
      "}"
    ]
  },

// PBDS ordered set header files

  "PBDS": {
    "prefix": "_pbds",
    "body": [
      "#include<ext/pb_ds/assoc_container.hpp>",
      "using namespace __gnu_pbds;",
      "typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;",
      "//less, less_equal, greater, greater_equal"
    ]
  }
}
